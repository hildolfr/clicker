Refactor: Serialized, Human-like Automation Scheduling with Visual Indicators
Version: 1.2 (Performance Update)
Date: May 2025

Summary of Major Changes:

1. Replaced the old automation loop (which pressed keys in sequence with fixed delays) with a new scheduler using a single worker thread and a priority queue.
2. Each keystroke from keystrokes.txt is now scheduled independently, but all keypresses are serialized: only one key is ever pressed at a time, even if their intervals overlap.
3. The start_time_stagger from settings.json is used as the initial delay before any key is pressed after activation.
4. After each keypress, that key is rescheduled for its next interval, ensuring that the timing in keystrokes.txt is always obeyed.
5. If two or more keys are due at the same time, they are queued and executed one after another, never simultaneously.
6. The worker thread exits cleanly when automation is deactivated, and the schedule is cleared.
7. Added "order_obeyed" setting to control keystroke execution order: when true, keystrokes execute in the exact order from the file; when false, they're sorted by delay (lowest first).
8. Enhanced comment handling in configuration files for better user documentation.
9. Improved error handling for admin privileges and configuration file processing.
10. Added visual indicators for automation status:
    - GDI-based indicator that works in fullscreen applications
    - Pygame-based indicator as an alternative for window-based applications
    - User-selectable via the "indicator_type" setting
11. Added "global_cooldown" setting to enforce a minimum time between any keystroke executions, regardless of individual delay settings, ensuring a global rate limit on key presses.
12. Improved settings migration for backward compatibility when upgrading from previous versions.
13. Enhanced build scripts for better deployment and distribution packaging.

Motivation:

- The previous approach could result in unnatural, overlapping, or simultaneous keypresses if keystroke intervals were long and/or not harmonized.
- This new approach ensures all keypresses are human-like: never overlapping, always respecting the intended timing, and never firing faster than a real user could.
- The design is robust to any set of intervals, including long and short timers, and is easy to extend or maintain.
- The optional order_obeyed setting provides flexibility for different automation scenarios: either maintain exact file order or optimize by delay value.
- Visual indicators provide clear feedback to users about the automation status, especially important when working with fullscreen applications.
- The global_cooldown feature adds an additional layer of rate limiting to prevent keypresses from occurring too rapidly in succession, enhancing the human-like behavior.
- Improved documentation and error handling makes the application more user-friendly and stable.
- The rest of the app (tray, hotkey, file watching) remains unchanged while gaining this new customization capability. 

Recent Fixes:

v1.1.2:
- Fixed logging errors and improved error handling
- Increased default start_time_stagger to 1.7 seconds for better compatibility
- Increased default global_cooldown to 1.5 seconds for more human-like interactions

v1.1.1:
- Fixed a bug where the GDI overlay was drawn on top of the first-run dialogue for new users, making it difficult to see and interact with the setup instructions.
- The fix delays initialization of the GDI indicator until after the first-run dialogue is dismissed, ensuring new users have a smooth onboarding experience. 

Refactoring and Improvement Notes:

1. Made entire codebase more error-resistant with extensive try/except blocks.
2. Improved system tray behavior with proper cleanup on exit.
3. Added enhanced visual indicators - both windowed (pygame) and fullscreen (GDI).
4. Added file watching to detect and reload configuration changes.
5. Added proper thread management with cleanup and safety measures.
6. Added PID check for singleton behavior.
7. Added memory-efficient keystroke scheduling system.
8. Added heap-based scheduling system for keystroke timing precision.
9. Added start_time_stagger and global_cooldown timing controls.
10. Added order_obeyed parameter to control keystroke execution order.
11. Improved logging with rotation and detailed status information.
12. Improved settings migration for backward compatibility when upgrading from previous versions.
13. Added keyboard hook handling with automatic restart on hotkey change.
14. Added detailed comments throughout to explain complex behaviors.
15. Added error recovery mechanisms to prevent crashes in corner cases.
16. Implemented automated randomization for keystrokes with identical timers.
17. Optimized thread initialization and execution for faster responsiveness.
18. Improved first keystroke performance with pre-parsing and caching.
19. Enhanced memory efficiency through data structure pre-allocation.
20. Reduced internal delays for faster keystroke execution.

Release Notes:

v1.2:
- Significant performance improvements, especially for first keypress responsiveness
- Added automatic randomization for keystrokes with identical timers
- Optimized thread initialization to reduce startup delay
- Improved keystroke execution efficiency with pre-parsing and caching
- Reduced internal delays for faster and more responsive keystroke execution
- Enhanced memory efficiency with pre-allocation of data structures

v1.1.2:
- Fixed logging errors and improved stability
- Increased default start_time_stagger to 1.7 seconds for better compatibility
- Increased default global_cooldown to 1.5 seconds for more human-like interactions

v1.1.1:
- Fixed bug where GDI overlay was drawn on top of the first-run dialogue for new users.
- Fixed minor UI issues. 